You need for drawing: 
an object, 
(possibly) a bounding box
(possibly) an identifier

show: the bounding box is not necessary, it is determined from the value of the object
  show1: identifier is not specified, identifier is returned (pull output)
  show2: (object, identifier) is specified as push input. If an object with that identifier has been shown, it is overwritten
  show3: identifier is specified as parameter, object is specified as push input
draw: a bounding box is provided explicily
  draw1: (object, bounding box) is specified as push input, identifier is returned
  draw2: (object, bounding box, identifier) as push input. If an object with that identifier has been drawn, it is overwritten
  draw3: identifier is specified as parameter, object is specified as push input. A bounding box must have been reserved for the identifier.
    If static=True (default), the bounding box must have been specified when the draw3 worker is placed, using canvas.reserve
    If static=False, the reservation must have been made only at runtime, not at place time, either using canvas.reserve or the reserve worker
  draw4: identifier is specified as parameter, (object, bounding box) is specified as push input

When something is drawn or shown, a weakref dictionary stores the identifier:object or identifier:(object, bounding box) pairs.

update1: takes an identifier as push input, which must have been drawn or shown before. The object is redrawn or reshown. This is only useful if the object has been modified since the last draw or show. 
update2: takes an identifier and a bounding box OR parameter object as push input; the identifier must have been drawn before. The object is redrawn.
update3: as update1, but the identifier is a parameter
update4: as update2, but the identifier is a parameter

remove1: takes an identifier as push input, which must have been drawn or shown before. The object is removed from the canvas.
remove2: takes an identifier as push input. If the identifier has been drawn or shown before, the object is removed from the canvas.

reserve: takes an identifier and a bounding box, and stores the relation for the draw3 worker. 

How to register your own objects to the canvas:
You have to provide one of the two following plugins:
1. ("canvas", "show", <object class name>), 
  taking arguments <object> and <identifier>, and optionally <parameters>
  This method will be invoked *once* when an object is shown
OR:
2. ("canvas", "draw", <object class name>), 
  taking arguments <object>, <identifier> and <bounding box>, and optionally <parameters> 
  This method will be invoked *once* when an object is drawn
and in addition you have to provide:
3. ("canvas", "update", <object class name>):
  takes the same arguments as draw/show
4. ("canvas", "remove", <object class name>):

It creates several "show" plugins: ("show1" and "show2")
OR "draw plugins ("draw1", "draw2" and "draw3")
and several update plugins ("update1", "update2" and "update3")
and a "remove1" plugin.
All these plugins are used by canvas workers
It also creates a socket ("canvas", typ, "draw"/"show", "init")
You can create plugins for these, which must contain an argdict dictionary
  the argdict must contain at least "obj", optionally "identifier", "bbox"/"box", "parameters".
  At init(), the draw/show function is called with the argdict values


Convenience classes
For the BGE:
- Specifying a draw/show drone from a per-frame drawing callback,
    required argument: obj (and bbox for show drones)
    optional argument: parameters
- Specifying a draw/show drone from a builder class, with the following methods:
   - __init__: 
     required arguments: obj, identifier (and bbox for show drones),
     optional arguments: parameters
   - update: takes the same arguments as __init__, may return a different object
   - draw: a per-frame drawing callback, takes no arguments
   - remove: takes no arguments
   update/remove may do nothing 
For Panda3D:
- Specifying a draw drone from a builder class:
  Same as BGE, but no draw callback; 
   __init__/update  
     instead of a box2d, a parent Panda3d NodePath is supplied as 3rd argument
    it is supposed to create scene graph nodes for drawing
   update/remove must modify the scene graph
- Specifying a show drone from a builder class:
  Same as draw builder, but no parent NodePath


***
TODO: *three* systems! 
show, draw and show2 (new name)

There are two ways of drawing an object: show and draw. Both depend on a downstream 2D drawing engine that provides the plugins.

In the "show" system, the object is decoupled from the drawing; changing the object later does not affect the drawing (or vice versa).
  A "show" worker is always configured for a certain object type.
  Its input is a push tuple consisting of that type plus a "box2d" object.
  The "show" worker requires a single ("canvas","show", <datatype>) plugin, 
    that must be provided by the drawing engine
  This plugin must contain a function that accepts a datatype and box2d,
    and returns an identifier, ideally one that contains the datatype name so
    that identifier collisions are prevented.
  The identifier is placed on the worker's pull output.
  The "show2" worker is identical to the "show" worker, except that it does not take a "box2d": the drawing engine is supposed to extract this information from the object that is to be drawn. The "show2" worker requires a single ("canvas","show2", <datatype>) plugin.
  
  An "unshow" worker just takes an identifier. It requires one or more ("canvas", "unshow") plugins. Each plugin should contain a function that accepts an identifier, and returns True if the identifier is recognized and the corresponding object removed from the drawing engine.

In the "draw" system, the drawing engine receives a reference to the object that is to be drawn. The object can be modified by the hive system, and the drawing engine will update the drawing upon receiving a signal.

The "draw1", "draw2" and "undraw" workers just work as their "show" counterparts. In addition, the "redraw" worker takes a push identifier and sends a redraw signal to the drawing engine. The "drawbox" worker takes a pull identifier and requests the drawing engine for box2d 
Finally, the "draw3" worker works like the "draw" worker, but it does not return an identifier. Rather, it has a fixed identifier as its parameter: it assumes that the drawing engine already knows about: i.e. a ("canvas","draw3",<identifier>) plugin must be available. The draw worker does present its identifier as an additional pull output, for use by the "redraw" and "undraw" workers.
 
